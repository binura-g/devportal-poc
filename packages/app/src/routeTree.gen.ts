/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SecurityPostureRouteImport } from './routes/security-posture'
import { Route as ObservabilityRouteImport } from './routes/observability'
import { Route as InfrastructureRouteImport } from './routes/infrastructure'
import { Route as ComponentsRouteImport } from './routes/components'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ComponentsIndexRouteImport } from './routes/components.index'
import { Route as ObservabilityLogsRouteImport } from './routes/observability.logs'
import { Route as ComponentsCreateRouteImport } from './routes/components.create'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SecurityPostureRoute = SecurityPostureRouteImport.update({
  id: '/security-posture',
  path: '/security-posture',
  getParentRoute: () => rootRouteImport,
} as any)
const ObservabilityRoute = ObservabilityRouteImport.update({
  id: '/observability',
  path: '/observability',
  getParentRoute: () => rootRouteImport,
} as any)
const InfrastructureRoute = InfrastructureRouteImport.update({
  id: '/infrastructure',
  path: '/infrastructure',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsRoute = ComponentsRouteImport.update({
  id: '/components',
  path: '/components',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsIndexRoute = ComponentsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ComponentsRoute,
} as any)
const ObservabilityLogsRoute = ObservabilityLogsRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => ObservabilityRoute,
} as any)
const ComponentsCreateRoute = ComponentsCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => ComponentsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/components': typeof ComponentsRouteWithChildren
  '/infrastructure': typeof InfrastructureRoute
  '/observability': typeof ObservabilityRouteWithChildren
  '/security-posture': typeof SecurityPostureRoute
  '/settings': typeof SettingsRoute
  '/components/create': typeof ComponentsCreateRoute
  '/observability/logs': typeof ObservabilityLogsRoute
  '/components/': typeof ComponentsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/infrastructure': typeof InfrastructureRoute
  '/observability': typeof ObservabilityRouteWithChildren
  '/security-posture': typeof SecurityPostureRoute
  '/settings': typeof SettingsRoute
  '/components/create': typeof ComponentsCreateRoute
  '/observability/logs': typeof ObservabilityLogsRoute
  '/components': typeof ComponentsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/components': typeof ComponentsRouteWithChildren
  '/infrastructure': typeof InfrastructureRoute
  '/observability': typeof ObservabilityRouteWithChildren
  '/security-posture': typeof SecurityPostureRoute
  '/settings': typeof SettingsRoute
  '/components/create': typeof ComponentsCreateRoute
  '/observability/logs': typeof ObservabilityLogsRoute
  '/components/': typeof ComponentsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/components'
    | '/infrastructure'
    | '/observability'
    | '/security-posture'
    | '/settings'
    | '/components/create'
    | '/observability/logs'
    | '/components/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/infrastructure'
    | '/observability'
    | '/security-posture'
    | '/settings'
    | '/components/create'
    | '/observability/logs'
    | '/components'
  id:
    | '__root__'
    | '/'
    | '/components'
    | '/infrastructure'
    | '/observability'
    | '/security-posture'
    | '/settings'
    | '/components/create'
    | '/observability/logs'
    | '/components/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ComponentsRoute: typeof ComponentsRouteWithChildren
  InfrastructureRoute: typeof InfrastructureRoute
  ObservabilityRoute: typeof ObservabilityRouteWithChildren
  SecurityPostureRoute: typeof SecurityPostureRoute
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/security-posture': {
      id: '/security-posture'
      path: '/security-posture'
      fullPath: '/security-posture'
      preLoaderRoute: typeof SecurityPostureRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/observability': {
      id: '/observability'
      path: '/observability'
      fullPath: '/observability'
      preLoaderRoute: typeof ObservabilityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/infrastructure': {
      id: '/infrastructure'
      path: '/infrastructure'
      fullPath: '/infrastructure'
      preLoaderRoute: typeof InfrastructureRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components': {
      id: '/components'
      path: '/components'
      fullPath: '/components'
      preLoaderRoute: typeof ComponentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/': {
      id: '/components/'
      path: '/'
      fullPath: '/components/'
      preLoaderRoute: typeof ComponentsIndexRouteImport
      parentRoute: typeof ComponentsRoute
    }
    '/observability/logs': {
      id: '/observability/logs'
      path: '/logs'
      fullPath: '/observability/logs'
      preLoaderRoute: typeof ObservabilityLogsRouteImport
      parentRoute: typeof ObservabilityRoute
    }
    '/components/create': {
      id: '/components/create'
      path: '/create'
      fullPath: '/components/create'
      preLoaderRoute: typeof ComponentsCreateRouteImport
      parentRoute: typeof ComponentsRoute
    }
  }
}

interface ComponentsRouteChildren {
  ComponentsCreateRoute: typeof ComponentsCreateRoute
  ComponentsIndexRoute: typeof ComponentsIndexRoute
}

const ComponentsRouteChildren: ComponentsRouteChildren = {
  ComponentsCreateRoute: ComponentsCreateRoute,
  ComponentsIndexRoute: ComponentsIndexRoute,
}

const ComponentsRouteWithChildren = ComponentsRoute._addFileChildren(
  ComponentsRouteChildren,
)

interface ObservabilityRouteChildren {
  ObservabilityLogsRoute: typeof ObservabilityLogsRoute
}

const ObservabilityRouteChildren: ObservabilityRouteChildren = {
  ObservabilityLogsRoute: ObservabilityLogsRoute,
}

const ObservabilityRouteWithChildren = ObservabilityRoute._addFileChildren(
  ObservabilityRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComponentsRoute: ComponentsRouteWithChildren,
  InfrastructureRoute: InfrastructureRoute,
  ObservabilityRoute: ObservabilityRouteWithChildren,
  SecurityPostureRoute: SecurityPostureRoute,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
